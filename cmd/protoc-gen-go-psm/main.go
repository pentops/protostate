package main

import (
	"flag"
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"

	"github.com/pentops/protostate/internal/protogen/publish"
	"github.com/pentops/protostate/internal/protogen/query"
	"github.com/pentops/protostate/internal/protogen/state"
)

var Version = "1.0"

func main() {
	showVersion := flag.Bool("version", false, "print the version and exit")
	flag.Parse()
	if *showVersion {
		fmt.Printf("protoc-gen-go-psm %v\n", Version)
		return
	}

	var flags flag.FlagSet

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {

	stateSets, err := state.WalkFile(file)
	if err != nil {

		gen.Error(fmt.Errorf("walkFile: %w", err))
		return
	}

	if len(stateSets) > 0 {
		filename := file.GeneratedFilenamePrefix + "_psm.pb.go"
		g := gen.NewGeneratedFile(filename, file.GoImportPath)
		g.P("// Code generated by protoc-gen-go-psm. DO NOT EDIT.")
		g.P()
		g.P("package ", file.GoPackageName)
		g.P()

		// Build the state sets from the source file
		for _, stateSet := range stateSets {
			stateSet.Write(g)
		}
	}

	publishSets, err := publish.WalkFile(file)
	if err != nil {
		gen.Error(err)
		return
	}

	if len(publishSets) > 0 {
		filename := file.GeneratedFilenamePrefix + "_psm_publish.pb.go"
		g := gen.NewGeneratedFile(filename, file.GoImportPath)
		g.P("// Code generated by protoc-gen-go-psm. DO NOT EDIT.")
		g.P()
		g.P("package ", file.GoPackageName)
		g.P()

		for _, publishSet := range publishSets {
			publishSet.Write(g)
		}
	}

	querySets, err := query.WalkFile(file)
	if err != nil {
		gen.Error(err)
		return
	}

	if len(querySets) > 0 {
		filename := file.GeneratedFilenamePrefix + "_psm_query.pb.go"
		g := gen.NewGeneratedFile(filename, file.GoImportPath)
		g.P("// Code generated by protoc-gen-go-psm. DO NOT EDIT.")
		g.P()
		g.P("package ", file.GoPackageName)
		g.P()

		for _, querySet := range querySets {
			querySet.Write(g)
		}
	}
}
