package psm

import (
	"context"
	"fmt"
	"time"

	"github.com/pentops/j5/gen/j5/state/v1/psm_j5pb"
	"github.com/pentops/o5-messaging/o5msg"
	"github.com/pentops/sqrlx.go/sqrlx"
	"google.golang.org/protobuf/proto"
)

/*
# Generic Type Parameter Sets

Two sets of generic type sets exist:

`K S ST SD E IE`
`K S ST SD E IE SE`

Both share the same types, as follows, and defined below

### `K IKeyset`
### `S IState[K, ST, SD]`
### `ST IStatusEnum`
### `SD IStateData`
### `SD IStateData,
E IEvent[K, S, ST, SD, IE]`
### `IE IInnerEvent`
### `SE IInnerEvent`

The Specific single typed event *struct* which is the specific event for the transition.
SE implements the same interface of IE.
e.g. *testpb.FooPSMEvent_Created, the concrete proto message which implements testpb.FooPSMEvent


The state machine deals with the first shorter chain, as it deals with all events.
Transitions deal with a single specific event type, so have the extra SE parameter.

K, S, ST, E, and IE are set to one single type for the entire state machine
SE is set to a single type for each transition.
*/

// IGenericProtoMessage is the base extensions shared by all message entities in the PSM generated code
type IPSMMessage interface {
	proto.Message
	PSMIsSet() bool
}

// IStatusEnum is enum representing the named state of the entity.
// e.g. *testpb.FooStatus (int32)
type IStatusEnum interface {
	~int32
	ShortString() string
	String() string
}

type IKeyset interface {
	IPSMMessage
	PSMFullName() string
	PSMKeyValues() (map[string]string, error) // map of column_name to UUID string
}

// IState[K, ST, SD]is the main State Entity e.g. *testpb.FooState
type IState[K IKeyset, ST IStatusEnum, SD IStateData] interface {
	IPSMMessage
	GetStatus() ST
	SetStatus(ST)
	PSMMetadata() *psm_j5pb.StateMetadata
	PSMKeys() K
	SetPSMKeys(K)
	PSMData() SD
}

// IStateData is the Data Entity e.g. *testpb.FooData
type IStateData interface {
	IPSMMessage
}

// IEvent is the Event Wrapper, the top level which has metadata, foreign keys to the state, and the event itself.
// e.g. *testpb.FooEvent, the concrete proto message
type IEvent[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	Inner any,
] interface {
	proto.Message
	UnwrapPSMEvent() Inner
	SetPSMEvent(Inner) error
	PSMKeys() K
	SetPSMKeys(K)
	PSMMetadata() *psm_j5pb.EventMetadata
	PSMIsSet() bool
}

// IInnerEvent is the typed event *interface* which is the set of all possible events for the state machine
// e.g. testpb.FooPSMEvent interface - this is generated by the protoc plugin in _psm.pb.go
// It is set at compile time specifically to the interface type.
type IInnerEvent interface {
	IPSMMessage
	PSMEventKey() string
}

// CallbackBaton should only be used in generated code.
type CallbackBaton[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	E IEvent[K, S, ST, SD, IE],
	IE IInnerEvent,
] interface {
	SideEffect(o5msg.Message)
	DelayedSideEffect(o5msg.Message, time.Duration)
	ChainEvent(IE)
	FullCause() E
	AsCause() *psm_j5pb.Cause
	Publish(o5msg.Message)
}

// TransitionMutation runs at the start of a transition to merge the event
// information into the state data object. The state object is mutable in this
// context.
type TransitionMutation[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	E IEvent[K, S, ST, SD, IE],
	IE IInnerEvent,
	SE IInnerEvent,
] func(SD, SE) error

func (f TransitionMutation[K, S, ST, SD, E, IE, SE]) runMutation(state S, event E) error { // nolint:unused // Used by genereted code.
	asType, ok := any(event.UnwrapPSMEvent()).(SE)
	if !ok {
		name := event.ProtoReflect().Descriptor().FullName()
		return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
	}

	return f(state.PSMData(), asType)
}

func (f TransitionMutation[K, S, ST, SD, E, IE, SE]) eventType() string { // nolint:unused // Used by genereted code.
	return (*new(SE)).PSMEventKey()
}

// TransitionHook Executes after the mutations. This hook has access to the
// transaction and can trigger side effects, including chained events, which are additional
// events processed by the state machine.
type TransitionHook[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	E IEvent[K, S, ST, SD, IE],
	IE IInnerEvent,
] struct {
	Callback    func(context.Context, sqrlx.Transaction, CallbackBaton[K, S, ST, SD, E, IE], S, E) error
	RunOnFollow bool   // If true, this hook runs on follow-up events, not just the initial transition.
	EventType   string // If set, this hook only runs for the specific event type.
}

func (hook TransitionHook[K, S, ST, SD, E, IE]) runTransition(ctx context.Context, tx sqrlx.Transaction, baton CallbackBaton[K, S, ST, SD, E, IE], state S, event E) error { // nolint:unused // Used by genereted code.

	return hook.Callback(ctx, tx, baton, state, event)
}

func (hook TransitionHook[K, S, ST, SD, E, IE]) eventType() string { // nolint:unused // Used by genereted code.
	return hook.EventType
}

func (hook TransitionHook[K, S, ST, SD, E, IE]) runOnFollow() bool { // nolint:unused // Used by genereted code.
	return hook.RunOnFollow
}

// GeneralHook runs after Transition mutations and hooks for all events and
// states.
type GeneralEventHook[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	E IEvent[K, S, ST, SD, IE],
	IE IInnerEvent,
] struct {
	Callback    func(context.Context, sqrlx.Transaction, CallbackBaton[K, S, ST, SD, E, IE], S, E) error
	RunOnFollow bool // If true, this hook runs on follow-up events, not just the initial transition.
}

func (f GeneralEventHook[K, S, ST, SD, E, IE]) runTransition(ctx context.Context, tx sqrlx.Transaction, baton CallbackBaton[K, S, ST, SD, E, IE], state S, event E) error { // nolint:unused // Used by genereted code.
	return f.Callback(ctx, nil, baton, state, event)
}

func (f GeneralEventHook[K, S, ST, SD, E, IE]) runOnFollow() bool { // nolint:unused // Used by genereted code.
	return f.RunOnFollow
}

// GeneralStateHook runs after Transition mutations and hooks for all events and
// states.
type GeneralStateHook[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	E IEvent[K, S, ST, SD, IE],
	IE IInnerEvent,
] struct {
	Callback    func(context.Context, sqrlx.Transaction, CallbackBaton[K, S, ST, SD, E, IE], S) error
	RunOnFollow bool // If true, this hook runs on follow-up events, not just the initial transition.
}

func (f GeneralStateHook[K, S, ST, SD, E, IE]) runTransition(ctx context.Context, tx sqrlx.Transaction, baton CallbackBaton[K, S, ST, SD, E, IE], state S) error { // nolint:unused // Used by genereted code.
	return f.Callback(ctx, tx, baton, state)
}

func (f GeneralStateHook[K, S, ST, SD, E, IE]) runOnFollow() bool { // nolint:unused // Used by genereted code.
	return f.RunOnFollow
}

func RunLinkHook[
	K IKeyset,
	S IState[K, ST, SD],
	ST IStatusEnum,
	SD IStateData,
	E IEvent[K, S, ST, SD, IE],
	IE IInnerEvent,
	SE IInnerEvent,

	DK IKeyset,
	DIE IInnerEvent,
](
	ctx context.Context,
	destination LinkDestination[DK, DIE],
	callback func(context.Context, sqrlx.Transaction, S, SE, func(DK, DIE)) error,
	tx sqrlx.Transaction,
	state S,
	event E,
) error {
	asType, ok := any(event.UnwrapPSMEvent()).(SE)
	if !ok {
		return fmt.Errorf("unexpected event type in transition: %T [IE] does not match [SE] (%T)", any(event), new(SE))
	}

	type matchedEvent struct {
		Key   DK
		Inner DIE
	}

	events := make([]matchedEvent, 0, 1)
	err := callback(ctx, tx, state, asType, func(key DK, event DIE) {
		events = append(events, matchedEvent{Key: key, Inner: event})
	})
	if err != nil {
		return err
	}

	cause := &psm_j5pb.Cause{
		Type: &psm_j5pb.Cause_PsmEvent{
			PsmEvent: &psm_j5pb.PSMEventCause{
				EventId:      event.PSMMetadata().EventId,
				StateMachine: (*new(K)).PSMFullName(),
			},
		},
	}

	for _, chained := range events {
		destKeys := chained.Key
		destEvent := chained.Inner
		if err := destination.transitionFromLink(ctx, tx, cause, destKeys, destEvent); err != nil {
			return err
		}
	}
	return nil
}

type LinkDestination[
	DK IKeyset,
	DIE IInnerEvent,
] interface {
	transitionFromLink(
		ctx context.Context,
		tx sqrlx.Transaction,
		cause *psm_j5pb.Cause,
		destKeys DK,
		destEvent DIE,
	) error
}
