// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package test_pb

import (
	context "context"
	fmt "fmt"
	psm_j5pb "github.com/pentops/j5/gen/j5/state/v1/psm_j5pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM FooPSM

type FooPSM = psm.StateMachine[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
]

type FooPSMDB = psm.DBStateMachine[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
]

type FooPSMEventSpec = psm.EventSpec[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
]

type FooPSMEventKey = string

const (
	FooPSMEventNil     FooPSMEventKey = "<nil>"
	FooPSMEventCreated FooPSMEventKey = "created"
	FooPSMEventUpdated FooPSMEventKey = "updated"
	FooPSMEventDeleted FooPSMEventKey = "deleted"
)

// EXTEND FooKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *FooKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *FooKeys) PSMFullName() string {
	return "test.v1.foo"
}
func (msg *FooKeys) PSMKeyValues() (map[string]string, error) {
	keyset := map[string]string{
		"foo_id": msg.FooId,
	}
	if msg.TenantId != nil {
		keyset["tenant_id"] = *msg.TenantId
	}
	if msg.MetaTenantId != "" {
		keyset["meta_tenant_id"] = msg.MetaTenantId
	}
	return keyset, nil
}

// EXTEND FooState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *FooState) PSMIsSet() bool {
	return msg != nil
}

func (msg *FooState) PSMMetadata() *psm_j5pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *FooState) PSMKeys() *FooKeys {
	return msg.Keys
}

func (msg *FooState) SetStatus(status FooStatus) {
	msg.Status = status
}

func (msg *FooState) SetPSMKeys(inner *FooKeys) {
	msg.Keys = inner
}

func (msg *FooState) PSMData() *FooData {
	if msg.Data == nil {
		msg.Data = &FooData{}
	}
	return msg.Data
}

// EXTEND FooData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *FooData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND FooEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *FooEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *FooEvent) PSMMetadata() *psm_j5pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *FooEvent) PSMKeys() *FooKeys {
	return msg.Keys
}

func (msg *FooEvent) SetPSMKeys(inner *FooKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the FooPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *FooEvent) PSMEventKey() FooPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return FooPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *FooEvent) UnwrapPSMEvent() FooPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *FooEventType_Created_:
		return v.Created
	case *FooEventType_Updated_:
		return v.Updated
	case *FooEventType_Deleted_:
		return v.Deleted
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *FooEvent) SetPSMEvent(inner FooPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &FooEventType{}
	}
	switch v := inner.(type) {
	case *FooEventType_Created:
		msg.Event.Type = &FooEventType_Created_{Created: v}
	case *FooEventType_Updated:
		msg.Event.Type = &FooEventType_Updated_{Updated: v}
	case *FooEventType_Deleted:
		msg.Event.Type = &FooEventType_Deleted_{Deleted: v}
	default:
		return fmt.Errorf("invalid type %T for FooEventType", v)
	}
	return nil
}

type FooPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() FooPSMEventKey
}

// EXTEND FooEventType_Created with the FooPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *FooEventType_Created) PSMIsSet() bool {
	return msg != nil
}

func (*FooEventType_Created) PSMEventKey() FooPSMEventKey {
	return FooPSMEventCreated
}

// EXTEND FooEventType_Updated with the FooPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *FooEventType_Updated) PSMIsSet() bool {
	return msg != nil
}

func (*FooEventType_Updated) PSMEventKey() FooPSMEventKey {
	return FooPSMEventUpdated
}

// EXTEND FooEventType_Deleted with the FooPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *FooEventType_Deleted) PSMIsSet() bool {
	return msg != nil
}

func (*FooEventType_Deleted) PSMEventKey() FooPSMEventKey {
	return FooPSMEventDeleted
}

func FooPSMBuilder() *psm.StateMachineConfig[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
] {
	return &psm.StateMachineConfig[
		*FooKeys,    // implements psm.IKeyset
		*FooState,   // implements psm.IState
		FooStatus,   // implements psm.IStatusEnum
		*FooData,    // implements psm.IStateData
		*FooEvent,   // implements psm.IEvent
		FooPSMEvent, // implements psm.IInnerEvent
	]{}
}

// FooPSMMutation runs at the start of a transition to merge the event information into the state data object. The state object is mutable in this context.
func FooPSMMutation[SE FooPSMEvent](cb func(*FooData, SE) error) psm.TransitionMutation[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
	SE,          // Specific event type for the transition
] {
	return psm.TransitionMutation[
		*FooKeys,    // implements psm.IKeyset
		*FooState,   // implements psm.IState
		FooStatus,   // implements psm.IStatusEnum
		*FooData,    // implements psm.IStateData
		*FooEvent,   // implements psm.IEvent
		FooPSMEvent, // implements psm.IInnerEvent
		SE,          // Specific event type for the transition
	](cb)
}

type FooPSMHookBaton = psm.HookBaton[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
]

type FooPSMFullBaton = psm.CallbackBaton[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
]

// FooPSMLogicHook runs after the mutation is complete. This hook can trigger side effects, including chained events, which are additional events processed by the state machine. Use this for Business Logic which determines the 'next step' in processing.
func FooPSMLogicHook[
	SE FooPSMEvent,
](
	cb func(
		context.Context,
		FooPSMHookBaton,
		*FooState,
		SE,
	) error) psm.TransitionHook[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
	SE,          // Specific event type for the transition
] {
	return psm.TransitionHook[
		*FooKeys,    // implements psm.IKeyset
		*FooState,   // implements psm.IState
		FooStatus,   // implements psm.IStatusEnum
		*FooData,    // implements psm.IStateData
		*FooEvent,   // implements psm.IEvent
		FooPSMEvent, // implements psm.IInnerEvent
		SE,          // Specific event type for the transition
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton FooPSMFullBaton, state *FooState, event *FooEvent) error {
			asType, ok := any(event.UnwrapPSMEvent()).(SE)
			if !ok {
				name := event.ProtoReflect().Descriptor().FullName()
				return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
			}
			return cb(ctx, baton, state, asType)
		},
		RunOnFollow: false,
	}
}

// FooPSMDataHook runs after the mutations, and can be used to update data in tables which are not controlled as the state machine, e.g. for pre-calculating fields for performance reasons. Use of this hook prevents (future) transaction optimizations, as the transaction state when the function is called must needs to match the processing state, but only for this single transition, unlike the GeneralEventDataHook.
func FooPSMDataHook[
	SE FooPSMEvent,
](
	cb func(
		context.Context,
		sqrlx.Transaction,
		*FooData,
		SE,
	) error) psm.TransitionHook[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
	SE,          // Specific event type for the transition
] {
	return psm.TransitionHook[
		*FooKeys,    // implements psm.IKeyset
		*FooState,   // implements psm.IState
		FooStatus,   // implements psm.IStatusEnum
		*FooData,    // implements psm.IStateData
		*FooEvent,   // implements psm.IEvent
		FooPSMEvent, // implements psm.IInnerEvent
		SE,          // Specific event type for the transition
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton FooPSMFullBaton, state *FooState, event *FooEvent) error {
			asType, ok := any(event.UnwrapPSMEvent()).(SE)
			if !ok {
				name := event.ProtoReflect().Descriptor().FullName()
				return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
			}
			return cb(ctx, tx, state.PSMData(), asType)
		},
		RunOnFollow: true,
	}
}

// FooPSMLinkHook runs after the mutation and logic hook, and can be used to link the state machine to other state machines in the same database transaction
func FooPSMLinkHook[
	SE FooPSMEvent,
	DK psm.IKeyset,
	DIE psm.IInnerEvent,
](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(
		context.Context,
		*FooState,
		SE,
		func(DK, DIE),
	) error) psm.TransitionHook[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
	SE,          // Specific event type for the transition
] {
	return psm.TransitionHook[
		*FooKeys,    // implements psm.IKeyset
		*FooState,   // implements psm.IState
		FooStatus,   // implements psm.IStatusEnum
		*FooData,    // implements psm.IStateData
		*FooEvent,   // implements psm.IEvent
		FooPSMEvent, // implements psm.IInnerEvent
		SE,          // Specific event type for the transition
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton FooPSMFullBaton, state *FooState, event *FooEvent) error {
			return psm.RunLinkHook(ctx, linkDestination, cb, tx, state, event)
		},
		RunOnFollow: false,
	}
}

// FooPSMGeneralLogicHook runs once per transition at the state-machine level regardless of which transition / event is being processed. It runs exactly once per transition, with the state object in the final state after the transition but prior to processing any further events. Chained events are added to the *end* of the event queue for the transaction, and side effects are published (as always) when the transaction is committed. The function MUST be pure, i.e. It MUST NOT produce any side-effects outside of the HookBaton, and MUST NOT modify the state.
func FooPSMGeneralLogicHook(
	cb func(
		context.Context,
		FooPSMHookBaton,
		*FooState,
		*FooEvent,
	) error) psm.GeneralEventHook[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*FooKeys,    // implements psm.IKeyset
		*FooState,   // implements psm.IState
		FooStatus,   // implements psm.IStatusEnum
		*FooData,    // implements psm.IStateData
		*FooEvent,   // implements psm.IEvent
		FooPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton FooPSMFullBaton, state *FooState, event *FooEvent) error {
			return cb(ctx, baton, state, event)
		},
		RunOnFollow: false,
	}
}

// FooPSMGeneralStateDataHook runs at the state-machine level regardless of which transition / event is being processed. It runs at-least once before committing a database transaction after multiple transitions are complete. This hook has access only to the final state after the transitions and is used to update other tables based on the resulting state. It MUST be idempotent, it may be called after injecting externally-held state data.
func FooPSMGeneralStateDataHook(
	cb func(
		context.Context,
		sqrlx.Transaction,
		*FooState,
	) error) psm.GeneralStateHook[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*FooKeys,    // implements psm.IKeyset
		*FooState,   // implements psm.IState
		FooStatus,   // implements psm.IStatusEnum
		*FooData,    // implements psm.IStateData
		*FooEvent,   // implements psm.IEvent
		FooPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton FooPSMFullBaton, state *FooState) error {
			return cb(ctx, tx, state)
		},
		RunOnFollow: true,
	}
}

// FooPSMGeneralEventDataHook runs after each transition at the state-machine level regardless of which transition / event is being processed. It runs exactly once per transition, before any other events are processed. The presence of this hook type prevents (future) transaction optimizations, so should be used sparingly.
func FooPSMGeneralEventDataHook(
	cb func(
		context.Context,
		sqrlx.Transaction,
		*FooState,
		*FooEvent,
	) error) psm.GeneralEventHook[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*FooKeys,    // implements psm.IKeyset
		*FooState,   // implements psm.IState
		FooStatus,   // implements psm.IStatusEnum
		*FooData,    // implements psm.IStateData
		*FooEvent,   // implements psm.IEvent
		FooPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton FooPSMFullBaton, state *FooState, event *FooEvent) error {
			return cb(ctx, tx, state, event)
		},
		RunOnFollow: true,
	}
}

// FooPSMEventPublishHook  EventPublishHook runs for each transition, at least once before committing a database transaction after multiple transitions are complete. It should publish a derived version of the event using the publisher.
func FooPSMEventPublishHook(
	cb func(
		context.Context,
		psm.Publisher,
		*FooState,
		*FooEvent,
	) error) psm.GeneralEventHook[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*FooKeys,    // implements psm.IKeyset
		*FooState,   // implements psm.IState
		FooStatus,   // implements psm.IStatusEnum
		*FooData,    // implements psm.IStateData
		*FooEvent,   // implements psm.IEvent
		FooPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton FooPSMFullBaton, state *FooState, event *FooEvent) error {
			return cb(ctx, baton, state, event)
		},
		RunOnFollow: false,
	}
}

// FooPSMUpsertPublishHook runs for each transition, at least once before committing a database transaction after multiple transitions are complete. It should publish a derived version of the event using the publisher.
func FooPSMUpsertPublishHook(
	cb func(
		context.Context,
		psm.Publisher,
		*FooState,
	) error) psm.GeneralEventHook[
	*FooKeys,    // implements psm.IKeyset
	*FooState,   // implements psm.IState
	FooStatus,   // implements psm.IStatusEnum
	*FooData,    // implements psm.IStateData
	*FooEvent,   // implements psm.IEvent
	FooPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*FooKeys,    // implements psm.IKeyset
		*FooState,   // implements psm.IState
		FooStatus,   // implements psm.IStatusEnum
		*FooData,    // implements psm.IStateData
		*FooEvent,   // implements psm.IEvent
		FooPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton FooPSMFullBaton, state *FooState, event *FooEvent) error {
			return cb(ctx, baton, state)
		},
		RunOnFollow: false,
	}
}

func (event *FooEvent) EventPublishMetadata() *psm_j5pb.EventPublishMetadata {
	tenantKeys := make([]*psm_j5pb.EventTenant, 0)
	if event.Keys.TenantId != nil {
		tenantKeys = append(tenantKeys, &psm_j5pb.EventTenant{
			TenantType: "tenant",
			TenantId:   *event.Keys.TenantId,
		})
	}
	return &psm_j5pb.EventPublishMetadata{
		EventId:   event.Metadata.EventId,
		Sequence:  event.Metadata.Sequence,
		Timestamp: event.Metadata.Timestamp,
		Cause:     event.Metadata.Cause,
		Auth: &psm_j5pb.PublishAuth{
			TenantKeys: tenantKeys,
		},
	}
}
