// Generated by j5build v0.0.0-20250327071644-781ea9870e8f. DO NOT EDIT

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: test/v1/topic/bar.p.j5s.proto

package test_tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BarPublishTopic_BarEvent_FullMethodName = "/test.v1.topic.BarPublishTopic/BarEvent"
)

// BarPublishTopicClient is the client API for BarPublishTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarPublishTopicClient interface {
	BarEvent(ctx context.Context, in *BarEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type barPublishTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewBarPublishTopicClient(cc grpc.ClientConnInterface) BarPublishTopicClient {
	return &barPublishTopicClient{cc}
}

func (c *barPublishTopicClient) BarEvent(ctx context.Context, in *BarEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BarPublishTopic_BarEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarPublishTopicServer is the server API for BarPublishTopic service.
// All implementations must embed UnimplementedBarPublishTopicServer
// for forward compatibility
type BarPublishTopicServer interface {
	BarEvent(context.Context, *BarEventMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedBarPublishTopicServer()
}

// UnimplementedBarPublishTopicServer must be embedded to have forward compatible implementations.
type UnimplementedBarPublishTopicServer struct {
}

func (UnimplementedBarPublishTopicServer) BarEvent(context.Context, *BarEventMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BarEvent not implemented")
}
func (UnimplementedBarPublishTopicServer) mustEmbedUnimplementedBarPublishTopicServer() {}

// UnsafeBarPublishTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarPublishTopicServer will
// result in compilation errors.
type UnsafeBarPublishTopicServer interface {
	mustEmbedUnimplementedBarPublishTopicServer()
}

func RegisterBarPublishTopicServer(s grpc.ServiceRegistrar, srv BarPublishTopicServer) {
	s.RegisterService(&BarPublishTopic_ServiceDesc, srv)
}

func _BarPublishTopic_BarEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarPublishTopicServer).BarEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarPublishTopic_BarEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarPublishTopicServer).BarEvent(ctx, req.(*BarEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// BarPublishTopic_ServiceDesc is the grpc.ServiceDesc for BarPublishTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarPublishTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.v1.topic.BarPublishTopic",
	HandlerType: (*BarPublishTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BarEvent",
			Handler:    _BarPublishTopic_BarEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/v1/topic/bar.p.j5s.proto",
}
