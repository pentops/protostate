// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package test_spb

import (
	context "context"
	fmt "fmt"
	j5reflect "github.com/pentops/j5/lib/j5reflect"
	j5schema "github.com/pentops/j5/lib/j5schema"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// State Query Service for %sBar
// QuerySet is the query set for the Bar service.

type BarPSMQuerySet = psm.StateQuerySet

func NewBarPSMQuerySet(
	smSpec psm.QuerySpec,
	options psm.StateQueryOptions,
) (*BarPSMQuerySet, error) {
	return psm.BuildStateQuerySet(smSpec, options)
}

type BarPSMQuerySpec = psm.QuerySpec

func DefaultBarPSMQuerySpec(tableSpec psm.QueryTableSpec) BarPSMQuerySpec {
	return psm.QuerySpec{
		GetMethod: &j5schema.MethodSchema{
			Request:  j5schema.MustObjectSchema((&BarGetRequest{}).ProtoReflect().Descriptor()),
			Response: j5schema.MustObjectSchema((&BarGetResponse{}).ProtoReflect().Descriptor()),
		},
		ListMethod: &j5schema.MethodSchema{
			Request:  j5schema.MustObjectSchema((&BarListRequest{}).ProtoReflect().Descriptor()),
			Response: j5schema.MustObjectSchema((&BarListResponse{}).ProtoReflect().Descriptor()),
		},
		ListEventsMethod: &j5schema.MethodSchema{
			Request:  j5schema.MustObjectSchema((&BarEventsRequest{}).ProtoReflect().Descriptor()),
			Response: j5schema.MustObjectSchema((&BarEventsResponse{}).ProtoReflect().Descriptor()),
		},
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(reqReflect j5reflect.Object) (map[string]interface{}, error) {
			req, ok := reqReflect.Interface().(*BarListRequest)
			if !ok {
				return nil, fmt.Errorf("expected *BarListRequest but got %T", req)
			}
			filter := map[string]interface{}{}
			return filter, nil
		},
		ListEventsRequestFilter: func(reqReflect j5reflect.Object) (map[string]interface{}, error) {
			req, ok := reqReflect.Interface().(*BarEventsRequest)
			if !ok {
				return nil, fmt.Errorf("expected *BarEventsRequest but got %T", req)
			}
			filter := map[string]interface{}{}
			filter["bar_id"] = req.BarId
			filter["bar_other_id"] = req.BarOtherId
			filter["date_key"] = req.DateKey
			return filter, nil
		},
	}
}

type BarQueryServiceImpl struct {
	db       sqrlx.Transactor
	querySet *BarPSMQuerySet
	UnsafeBarQueryServiceServer
}

var _ BarQueryServiceServer = &BarQueryServiceImpl{}

func NewBarQueryServiceImpl(db sqrlx.Transactor, querySet *BarPSMQuerySet) *BarQueryServiceImpl {
	return &BarQueryServiceImpl{
		db:       db,
		querySet: querySet,
	}
}

func (s *BarQueryServiceImpl) BarGet(ctx context.Context, req *BarGetRequest) (*BarGetResponse, error) {
	resObject := &BarGetResponse{}
	err := s.querySet.Get(ctx, s.db, req.J5Object(), resObject.J5Object())
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *BarQueryServiceImpl) BarList(ctx context.Context, req *BarListRequest) (*BarListResponse, error) {
	resObject := &BarListResponse{}
	err := s.querySet.List(ctx, s.db, req.J5Object(), resObject.J5Object())
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *BarQueryServiceImpl) BarEvents(ctx context.Context, req *BarEventsRequest) (*BarEventsResponse, error) {
	resObject := &BarEventsResponse{}
	err := s.querySet.ListEvents(ctx, s.db, req.J5Object(), resObject.J5Object())
	if err != nil {
		return nil, err
	}
	return resObject, nil
}
