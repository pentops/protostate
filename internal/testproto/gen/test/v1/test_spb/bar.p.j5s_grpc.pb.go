// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: test/v1/service/bar.p.j5s.proto

package test_spb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BarQueryService_BarGet_FullMethodName    = "/test.v1.service.BarQueryService/BarGet"
	BarQueryService_BarList_FullMethodName   = "/test.v1.service.BarQueryService/BarList"
	BarQueryService_BarEvents_FullMethodName = "/test.v1.service.BarQueryService/BarEvents"
)

// BarQueryServiceClient is the client API for BarQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarQueryServiceClient interface {
	BarGet(ctx context.Context, in *BarGetRequest, opts ...grpc.CallOption) (*BarGetResponse, error)
	BarList(ctx context.Context, in *BarListRequest, opts ...grpc.CallOption) (*BarListResponse, error)
	BarEvents(ctx context.Context, in *BarEventsRequest, opts ...grpc.CallOption) (*BarEventsResponse, error)
}

type barQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBarQueryServiceClient(cc grpc.ClientConnInterface) BarQueryServiceClient {
	return &barQueryServiceClient{cc}
}

func (c *barQueryServiceClient) BarGet(ctx context.Context, in *BarGetRequest, opts ...grpc.CallOption) (*BarGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BarGetResponse)
	err := c.cc.Invoke(ctx, BarQueryService_BarGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barQueryServiceClient) BarList(ctx context.Context, in *BarListRequest, opts ...grpc.CallOption) (*BarListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BarListResponse)
	err := c.cc.Invoke(ctx, BarQueryService_BarList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barQueryServiceClient) BarEvents(ctx context.Context, in *BarEventsRequest, opts ...grpc.CallOption) (*BarEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BarEventsResponse)
	err := c.cc.Invoke(ctx, BarQueryService_BarEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarQueryServiceServer is the server API for BarQueryService service.
// All implementations must embed UnimplementedBarQueryServiceServer
// for forward compatibility
type BarQueryServiceServer interface {
	BarGet(context.Context, *BarGetRequest) (*BarGetResponse, error)
	BarList(context.Context, *BarListRequest) (*BarListResponse, error)
	BarEvents(context.Context, *BarEventsRequest) (*BarEventsResponse, error)
	mustEmbedUnimplementedBarQueryServiceServer()
}

// UnimplementedBarQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBarQueryServiceServer struct {
}

func (UnimplementedBarQueryServiceServer) BarGet(context.Context, *BarGetRequest) (*BarGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BarGet not implemented")
}
func (UnimplementedBarQueryServiceServer) BarList(context.Context, *BarListRequest) (*BarListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BarList not implemented")
}
func (UnimplementedBarQueryServiceServer) BarEvents(context.Context, *BarEventsRequest) (*BarEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BarEvents not implemented")
}
func (UnimplementedBarQueryServiceServer) mustEmbedUnimplementedBarQueryServiceServer() {}

// UnsafeBarQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarQueryServiceServer will
// result in compilation errors.
type UnsafeBarQueryServiceServer interface {
	mustEmbedUnimplementedBarQueryServiceServer()
}

func RegisterBarQueryServiceServer(s grpc.ServiceRegistrar, srv BarQueryServiceServer) {
	s.RegisterService(&BarQueryService_ServiceDesc, srv)
}

func _BarQueryService_BarGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarQueryServiceServer).BarGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarQueryService_BarGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarQueryServiceServer).BarGet(ctx, req.(*BarGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarQueryService_BarList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarQueryServiceServer).BarList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarQueryService_BarList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarQueryServiceServer).BarList(ctx, req.(*BarListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarQueryService_BarEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarQueryServiceServer).BarEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BarQueryService_BarEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarQueryServiceServer).BarEvents(ctx, req.(*BarEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BarQueryService_ServiceDesc is the grpc.ServiceDesc for BarQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.v1.service.BarQueryService",
	HandlerType: (*BarQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BarGet",
			Handler:    _BarQueryService_BarGet_Handler,
		},
		{
			MethodName: "BarList",
			Handler:    _BarQueryService_BarList_Handler,
		},
		{
			MethodName: "BarEvents",
			Handler:    _BarQueryService_BarEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/v1/service/bar.p.j5s.proto",
}
