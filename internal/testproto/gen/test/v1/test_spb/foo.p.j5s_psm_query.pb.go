// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package test_spb

import (
	context "context"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// State Query Service for %sFoo
// QuerySet is the query set for the Foo service.

type FooPSMQuerySet = psm.StateQuerySet[
	*FooGetRequest,
	*FooGetResponse,
	*FooListRequest,
	*FooListResponse,
	*FooEventsRequest,
	*FooEventsResponse,
]

func NewFooPSMQuerySet(
	smSpec psm.QuerySpec[
		*FooGetRequest,
		*FooGetResponse,
		*FooListRequest,
		*FooListResponse,
		*FooEventsRequest,
		*FooEventsResponse,
	],
	options psm.StateQueryOptions,
) (*FooPSMQuerySet, error) {
	return psm.BuildStateQuerySet[
		*FooGetRequest,
		*FooGetResponse,
		*FooListRequest,
		*FooListResponse,
		*FooEventsRequest,
		*FooEventsResponse,
	](smSpec, options)
}

type FooPSMQuerySpec = psm.QuerySpec[
	*FooGetRequest,
	*FooGetResponse,
	*FooListRequest,
	*FooListResponse,
	*FooEventsRequest,
	*FooEventsResponse,
]

func DefaultFooPSMQuerySpec(tableSpec psm.QueryTableSpec) FooPSMQuerySpec {
	return psm.QuerySpec[
		*FooGetRequest,
		*FooGetResponse,
		*FooListRequest,
		*FooListResponse,
		*FooEventsRequest,
		*FooEventsResponse,
	]{
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(req *FooListRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			return filter, nil
		},
		ListEventsRequestFilter: func(req *FooEventsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			filter["foo_id"] = req.FooId
			return filter, nil
		},
	}
}

type FooQueryServiceImpl struct {
	db       sqrlx.Transactor
	querySet *FooPSMQuerySet
	UnsafeFooQueryServiceServer
}

var _ FooQueryServiceServer = &FooQueryServiceImpl{}

func NewFooQueryServiceImpl(db sqrlx.Transactor, querySet *FooPSMQuerySet) *FooQueryServiceImpl {
	return &FooQueryServiceImpl{
		db:       db,
		querySet: querySet,
	}
}

func (s *FooQueryServiceImpl) FooGet(ctx context.Context, req *FooGetRequest) (*FooGetResponse, error) {
	resObject := &FooGetResponse{}
	err := s.querySet.Get(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *FooQueryServiceImpl) FooList(ctx context.Context, req *FooListRequest) (*FooListResponse, error) {
	resObject := &FooListResponse{}
	err := s.querySet.List(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *FooQueryServiceImpl) FooEvents(ctx context.Context, req *FooEventsRequest) (*FooEventsResponse, error) {
	resObject := &FooEventsResponse{}
	err := s.querySet.ListEvents(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}
