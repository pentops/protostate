// Generated by j5build v0.0.0-20250327071644-781ea9870e8f. DO NOT EDIT

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: test/v1/service/foo.p.j5s.proto

package test_spb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FooQueryService_FooGet_FullMethodName    = "/test.v1.service.FooQueryService/FooGet"
	FooQueryService_FooList_FullMethodName   = "/test.v1.service.FooQueryService/FooList"
	FooQueryService_FooEvents_FullMethodName = "/test.v1.service.FooQueryService/FooEvents"
)

// FooQueryServiceClient is the client API for FooQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooQueryServiceClient interface {
	FooGet(ctx context.Context, in *FooGetRequest, opts ...grpc.CallOption) (*FooGetResponse, error)
	FooList(ctx context.Context, in *FooListRequest, opts ...grpc.CallOption) (*FooListResponse, error)
	FooEvents(ctx context.Context, in *FooEventsRequest, opts ...grpc.CallOption) (*FooEventsResponse, error)
}

type fooQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFooQueryServiceClient(cc grpc.ClientConnInterface) FooQueryServiceClient {
	return &fooQueryServiceClient{cc}
}

func (c *fooQueryServiceClient) FooGet(ctx context.Context, in *FooGetRequest, opts ...grpc.CallOption) (*FooGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FooGetResponse)
	err := c.cc.Invoke(ctx, FooQueryService_FooGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooQueryServiceClient) FooList(ctx context.Context, in *FooListRequest, opts ...grpc.CallOption) (*FooListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FooListResponse)
	err := c.cc.Invoke(ctx, FooQueryService_FooList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fooQueryServiceClient) FooEvents(ctx context.Context, in *FooEventsRequest, opts ...grpc.CallOption) (*FooEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FooEventsResponse)
	err := c.cc.Invoke(ctx, FooQueryService_FooEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FooQueryServiceServer is the server API for FooQueryService service.
// All implementations must embed UnimplementedFooQueryServiceServer
// for forward compatibility
type FooQueryServiceServer interface {
	FooGet(context.Context, *FooGetRequest) (*FooGetResponse, error)
	FooList(context.Context, *FooListRequest) (*FooListResponse, error)
	FooEvents(context.Context, *FooEventsRequest) (*FooEventsResponse, error)
	mustEmbedUnimplementedFooQueryServiceServer()
}

// UnimplementedFooQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFooQueryServiceServer struct {
}

func (UnimplementedFooQueryServiceServer) FooGet(context.Context, *FooGetRequest) (*FooGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FooGet not implemented")
}
func (UnimplementedFooQueryServiceServer) FooList(context.Context, *FooListRequest) (*FooListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FooList not implemented")
}
func (UnimplementedFooQueryServiceServer) FooEvents(context.Context, *FooEventsRequest) (*FooEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FooEvents not implemented")
}
func (UnimplementedFooQueryServiceServer) mustEmbedUnimplementedFooQueryServiceServer() {}

// UnsafeFooQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooQueryServiceServer will
// result in compilation errors.
type UnsafeFooQueryServiceServer interface {
	mustEmbedUnimplementedFooQueryServiceServer()
}

func RegisterFooQueryServiceServer(s grpc.ServiceRegistrar, srv FooQueryServiceServer) {
	s.RegisterService(&FooQueryService_ServiceDesc, srv)
}

func _FooQueryService_FooGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FooGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooQueryServiceServer).FooGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooQueryService_FooGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooQueryServiceServer).FooGet(ctx, req.(*FooGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooQueryService_FooList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FooListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooQueryServiceServer).FooList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooQueryService_FooList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooQueryServiceServer).FooList(ctx, req.(*FooListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FooQueryService_FooEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FooEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooQueryServiceServer).FooEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooQueryService_FooEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooQueryServiceServer).FooEvents(ctx, req.(*FooEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FooQueryService_ServiceDesc is the grpc.ServiceDesc for FooQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FooQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.v1.service.FooQueryService",
	HandlerType: (*FooQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FooGet",
			Handler:    _FooQueryService_FooGet_Handler,
		},
		{
			MethodName: "FooList",
			Handler:    _FooQueryService_FooList_Handler,
		},
		{
			MethodName: "FooEvents",
			Handler:    _FooQueryService_FooEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/v1/service/foo.p.j5s.proto",
}

const (
	FooService_FooSummary_FullMethodName = "/test.v1.service.FooService/FooSummary"
)

// FooServiceClient is the client API for FooService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooServiceClient interface {
	FooSummary(ctx context.Context, in *FooSummaryRequest, opts ...grpc.CallOption) (*FooSummaryResponse, error)
}

type fooServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFooServiceClient(cc grpc.ClientConnInterface) FooServiceClient {
	return &fooServiceClient{cc}
}

func (c *fooServiceClient) FooSummary(ctx context.Context, in *FooSummaryRequest, opts ...grpc.CallOption) (*FooSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FooSummaryResponse)
	err := c.cc.Invoke(ctx, FooService_FooSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FooServiceServer is the server API for FooService service.
// All implementations must embed UnimplementedFooServiceServer
// for forward compatibility
type FooServiceServer interface {
	FooSummary(context.Context, *FooSummaryRequest) (*FooSummaryResponse, error)
	mustEmbedUnimplementedFooServiceServer()
}

// UnimplementedFooServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFooServiceServer struct {
}

func (UnimplementedFooServiceServer) FooSummary(context.Context, *FooSummaryRequest) (*FooSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FooSummary not implemented")
}
func (UnimplementedFooServiceServer) mustEmbedUnimplementedFooServiceServer() {}

// UnsafeFooServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooServiceServer will
// result in compilation errors.
type UnsafeFooServiceServer interface {
	mustEmbedUnimplementedFooServiceServer()
}

func RegisterFooServiceServer(s grpc.ServiceRegistrar, srv FooServiceServer) {
	s.RegisterService(&FooService_ServiceDesc, srv)
}

func _FooService_FooSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FooSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FooServiceServer).FooSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FooService_FooSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FooServiceServer).FooSummary(ctx, req.(*FooSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FooService_ServiceDesc is the grpc.ServiceDesc for FooService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FooService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.v1.service.FooService",
	HandlerType: (*FooServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FooSummary",
			Handler:    _FooService_FooSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/v1/service/foo.p.j5s.proto",
}
